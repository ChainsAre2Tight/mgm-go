package mgmgo_test

import (
	"fmt"
	"reflect"
	"testing"

	mgmgo "github.com/ChainsAre2Tight/mgm-go"
)

func TestDecryptor(t *testing.T) {
	tt := []struct {
		key            string
		plaintext      []byte
		associatedData []byte
		ciphertext     []byte
		mac            []byte
	}{
		{
			key: "8899AABBCCDDEEFF0011223344556677FEDCBA98765432100123456789ABCDEF",
			plaintext: []byte{
				0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88,
				0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A,
				0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 0x00,
				0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 0x00, 0x11,
				0xAA, 0xBB, 0xCC,
			},
			associatedData: []byte{
				0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
				0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
				0xEA, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
			},
			ciphertext: []byte{
				0xA9, 0x75, 0x7B, 0x81, 0x47, 0x95, 0x6E, 0x90, 0x55, 0xB8, 0xA3, 0x3D, 0xE8, 0x9F, 0x42, 0xFC,
				0x80, 0x75, 0xD2, 0x21, 0x2B, 0xF9, 0xFD, 0x5B, 0xD3, 0xF7, 0x06, 0x9A, 0xAD, 0xC1, 0x6B, 0x39,
				0x49, 0x7A, 0xB1, 0x59, 0x15, 0xA6, 0xBA, 0x85, 0x93, 0x6B, 0x5D, 0x0E, 0xA9, 0xF6, 0x85, 0x1C,
				0xC6, 0x0C, 0x14, 0xD4, 0xD3, 0xF8, 0x83, 0xD0, 0xAB, 0x94, 0x42, 0x06, 0x95, 0xC7, 0x6D, 0xEB,
				0x2C, 0x75, 0x52,
			},
			mac: []byte{
				0xCF, 0x5D, 0x65, 0x6F, 0x40, 0xC3, 0x4F, 0x5C, 0x46, 0xE8, 0xBB, 0x0E, 0x29, 0xFC, 0xDB, 0x4C,
			},
		},
	}
	for _, td := range tt {
		t.Run(
			fmt.Sprintf("K: %s, N: %v, A: %v, C: %v, T: %v -> P: %v", td.key, Nonce, td.associatedData, td.ciphertext, td.mac, td.plaintext),
			func(t *testing.T) {
				d := mgmgo.NewDecryptor()
				plaintext, err := d.Decrypt(td.key, Nonce.Bytes(), td.associatedData, td.ciphertext, td.mac)
				if err != nil {
					t.Fatalf("Error: %s", err)
				}
				if !reflect.DeepEqual(td.plaintext, plaintext) {
					t.Fatalf("Got:  %v, \nWant: %v", plaintext, td.plaintext)
				}
			},
		)
	}
}
